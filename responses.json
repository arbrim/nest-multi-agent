{
  "result": "=== employee.entity.ts ===\n```typescript\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Employee {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  salary: number;\n}\n```\n\n=== employee.repository.ts ===\n```typescript\nimport { EntityRepository, Repository } from 'typeorm';\nimport { Employee } from './employee.entity';\n\n@EntityRepository(Employee)\nexport class EmployeeRepository extends Repository<Employee> {\n}\n```\n\n=== employee.service.ts ===\n```typescript\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Employee } from './employee.entity';\nimport { EmployeeRepository } from './employee.repository';\n\n@Injectable()\nexport class EmployeeService {\n  constructor(\n    @InjectRepository(Employee)\n    private readonly employeeRepository: EmployeeRepository,\n  ) {}\n\n  async create(employee: Employee): Promise<Employee> {\n    return this.employeeRepository.save(employee);\n  }\n\n  async findAll(): Promise<Employee[]> {\n    return this.employeeRepository.find();\n  }\n\n  async findOne(id: number): Promise<Employee> {\n    return this.employeeRepository.findOne(id);\n  }\n\n  async remove(id: number): Promise<void> {\n    await this.employeeRepository.delete(id);\n  }\n}\n```\n\n=== employee.controller.ts ===\n```typescript\nimport { Controller, Get, Post, Param, Delete, Body } from '@nestjs/common';\nimport { Employee } from './employee.entity';\nimport { EmployeeService } from './employee.service';\n\n@Controller('employees')\nexport class EmployeeController {\n  constructor(private readonly employeeService: EmployeeService) {}\n\n  @Post()\n  create(@Body() employee: Employee): Promise<Employee> {\n    return this.employeeService.create(employee);\n  }\n\n  @Get()\n  findAll(): Promise<Employee[]> {\n    return this.employeeService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string): Promise<Employee> {\n    return this.employeeService.findOne(+id);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string): Promise<void> {\n    return this.employeeService.remove(+id);\n  }\n}\n```"
}